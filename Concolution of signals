#One example for convolution of signals
import numpy as np
import matplotlib.pyplot as plt

def impulse(n):
    y = []
    for i in n:
        if i == 0:
            y.append(1)
        else:
            y.append(0)
    return y

def shift(y, no):
    ys = [0]*len(y)
    for i in range(len(y)):
        if i-no > 0 and i-no < len(y)-1:
            ys[i] = y[i-no]
        else:
            ys[i] = 0
    return ys

def convolve(x, h, n):    
    y = [0]*n
    for i in range(len(n)):
        y = np.add(y, np.dot(x[i], shift(h, n[i])))
    return y

#Input signal
n = np.arange(-2, 7, 1)
x0 = shift(impulse(n), -1)
x1 = np.dot(impulse(n), -1)
x2 = shift(np.dot(impulse(n), 2), 1)
x3 = shift(np.dot(impulse(n), 3), 2)
x = [sum(x) for x in zip(x0, x1, x2, x3)]

#Impulse respone signal
h0 = impulse(n)
h1 = shift(np.dot(impulse(n), -2), 1)
h2 = shift(np.dot(impulse(n), 3), 2)
h3 = shift(np.dot(impulse(n), -1), 3)
h = [sum(x) for x in zip(h0, h1, h2, h3)]

plt.subplot(2, 2, 1)
plt.tight_layout(h_pad=5, w_pad=5)
plt.xlabel("n")
plt.ylabel("d [n]")
plt.xticks(n)
plt.yticks([0, 1])
plt.title("Impulse Signal")
plt.stem(n, impulse(n))

plt.subplot(2, 2, 2)
plt.xlabel("n")
plt.ylabel("x [n]")
plt.xticks(n)
plt.yticks(x)
plt.title("Input Signal")
plt.stem(n, x)

plt.subplot(2, 2, 3)
plt.xlabel("n")
plt.ylabel("h [n]")
plt.xticks(n)
plt.yticks(h)
plt.title("Impulse Response")
plt.stem(n, h)

y = convolve(x, h, n)
plt.subplot(2, 2, 4)
plt.xlabel("n")
plt.ylabel("y [n]")
plt.xticks(n)
plt.yticks(y)
plt.title("Output Signal")
plt.stem(n, y)

print("x[n] = ", x)
print("h[n] = ", h)
print("y[n] = ", y)
print("  n  = ", n)
